
CREATE FUNCTION STAFF_IN_DEP (DEPNAME VARCHAR(120))
     RETURNS TABLE (EGN VARCHAR(10), SALARY DOUBLE)
     LANGUAGE SQL
     READS SQL DATA
     NO EXTERNAL ACTION
     DETERMINISTIC
     RETURN
       SELECT EGN, SALARY
         FROM (SELECT * FROM STAFF RIGHT JOIN DEP ON STAFF.DEP = NAME) AS SD
         WHERE SD.NAME = DEPNAME;
        
CREATE FUNCTION MANAGER_OF(DEP_NAME VARCHAR(120))
	RETURNS VARCHAR(120)
	SPECIFIC MANAGER_OF
	LANGUAGE SQL
	READS SQL DATA
	NO EXTERNAL ACTION
	DETERMINISTIC
	BEGIN ATOMIC
	DECLARE THE_MANAGER VARCHAR(10);
	SET THE_MANAGER = (SELECT MANAGER FROM DEP WHERE DEP.NAME = DEP_NAME);
	RETURN THE_MANAGER;
	END

-- ADDS NEW EMPLOYEE TO TABLE STAFF, AUTOMATICALLY LINKING THE MANAGER TO MANAGER OF <THE_DEP>
 CREATE FUNCTION ADD_EMPLOYEE(THE_EGN varchar(10), THE_PHONE VARCHAR(13) , THE_DEP VARCHAR(120), THE_DB DATE, THE_SALARY DOUBLE)
 	RETURNS TABLE (EGN VARCHAR(10),
                   SALARY DOUBLE,
                   EGN_MANAGER VARCHAR(10))	
 	LANGUAGE SQL
 	MODIFIES SQL DATA
 	NO EXTERNAL ACTION
    DETERMINISTIC
 	F1: BEGIN ATOMIC
	 	DECLARE DEP_EXISTS INTEGER;
	 	
	 	SET DEP_EXISTS = (SELECT COUNT(*) FROM DEP WHERE DEP.NAME = THE_DEP);
	 	
	 	IF DEP_EXISTS = 0 THEN
	 		INSERT INTO DEP (NAME, MANAGER, OFFICE) VALUES (THE_DEP, '0000000000', NULL);
	 	END IF;
	 	INSERT INTO STAFF(EGN, PHONE, DEP, BD, SALARY, LINEAR_MANAGER) VALUES (THE_EGN, THE_PHONE, THE_DEP, THE_SALARY, MANAGER_OF(THE_DEP));
 	END;
	RETURN SELECT EGN, PHONE, LINEAR_MANAGER FROM EMPLOYEE WHERE EGN = THE_EGN;
 	END
 	
CREATE FUNCTION SET_DEP_OF(EMPL_EGN VARCHAR(10), DEP_NAME VARCHAR(120))
RETURNS BOOLEAN
     LANGUAGE SQL
     MODIFIES SQL DATA
     NO EXTERNAL ACTION
     BEGIN
       UPDATE STAFF s SET s.DEP = DEP_NAME WHERE s.EGN = EMPL_EGN;
      RETURN TRUE;
     END;